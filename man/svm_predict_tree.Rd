% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/svmodt_predict_tree.R
\name{svm_predict_tree}
\alias{svm_predict_tree}
\title{Predict using a Support Vector Machine based Oblique Decision Tree}
\usage{
svm_predict_tree(tree, newdata, return_probs = FALSE, calibrate_probs = TRUE)
}
\arguments{
\item{tree}{A tree node object (leaf or internal) created by \code{svm_split}.}

\item{newdata}{A data frame of new predictor values.}

\item{return_probs}{Logical; if \code{TRUE}, returns both predictions and class probabilities.}

\item{calibrate_probs}{Logical; if \code{TRUE}, converts decision values to probabilities
using logistic calibration when direct SVM probabilities are unavailable.}
}
\value{
If \code{return_probs = FALSE}, returns a character vector of predicted class labels.
  If \code{return_probs = TRUE}, returns a list with elements:
  \itemize{
    \item \code{predictions}: Character vector of predicted class labels.
    \item \code{probabilities}: Numeric matrix of class probabilities (rows = samples, columns = classes).
  }
}
\description{
Predicts class labels or class probabilities for new data using a tree
constructed with SVM splits. Handles leaf nodes, internal nodes, recursive traversal,
and fallback mechanisms when SVM predictions or scaling fail.
}
\details{
- Leaf nodes return the majority class stored in the node, along with class probabilities.
- Internal nodes scale features, compute SVM decision values, and traverse left/right children.
- Supports binary and multiclass SVMs (one-vs-one decision values for multiclass).
- If feature scaling fails or child nodes are missing, predictions are generated using:
  1. SVM-provided probabilities.
  2. Calibrated decision values (sigmoid/logistic conversion).
  3. Training class distribution or uniform probabilities as a last resort.
- Probabilities are normalized to sum to 1 for each sample.
}
\examples{
\dontrun{
# Assuming `tree` is trained via svm_split
preds <- svm_predict_tree(tree, newdata = test_data)
preds_with_probs <- svm_predict_tree(tree, newdata = test_data, return_probs = TRUE)
}

}
